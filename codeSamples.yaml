overlay: 1.0.0
info:
  title: CodeSamples overlay for python target
  version: 0.0.0
actions:
  - target: $["paths"]["/photo/:/transcode"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getResizedPhoto
          source: |-
            import plex_api
            from plex_api.models import operations

            s = plex_api.PlexAPI(
                access_token="<YOUR_API_KEY_HERE>",
                x_plex_client_identifier='Postman',
            )

            res = s.get_resized_photo(request=operations.GetResizedPhotoRequest(
                width=110,
                height=165,
                opacity=100,
                blur=20,
                min_size=operations.MinSize.ONE,
                upscale=operations.Upscale.ZERO,
                url='/library/metadata/49564/thumb/1654258204',
            ))

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/hubs/search/voice"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: performVoiceSearch
          source: |-
            import plex_api

            s = plex_api.PlexAPI(
                access_token="<YOUR_API_KEY_HERE>",
                x_plex_client_identifier='Postman',
            )

            res = s.perform_voice_search(query='dead+poop', section_id=4094.8, limit=5)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/library/metadata/{ratingKey}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getMetadata
          source: |-
            import plex_api

            s = plex_api.PlexAPI(
                access_token="<YOUR_API_KEY_HERE>",
                x_plex_client_identifier='Postman',
            )

            res = s.get_metadata(rating_key=8382.31)

            if res.object is not None:
                # handle response
                pass
  - target: $["paths"]["/playlists/upload"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: uploadPlaylist
          source: |-
            import plex_api
            from plex_api.models import operations

            s = plex_api.PlexAPI(
                access_token="<YOUR_API_KEY_HERE>",
                x_plex_client_identifier='Postman',
            )

            res = s.upload_playlist(path='/home/barkley/playlist.m3u', force=operations.Force.ZERO)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/playlists"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getPlaylists
          source: |-
            import plex_api
            from plex_api.models import operations

            s = plex_api.PlexAPI(
                access_token="<YOUR_API_KEY_HERE>",
                x_plex_client_identifier='Postman',
            )

            res = s.get_playlists(playlist_type=operations.PlaylistType.AUDIO, smart=operations.QueryParamSmart.ZERO)

            if res.object is not None:
                # handle response
                pass
  - target: $["paths"]["/playlists/{playlistID}/items"]["put"]
    update:
      x-codeSamples:
        - lang: python
          label: addPlaylistContents
          source: |-
            import plex_api

            s = plex_api.PlexAPI(
                access_token="<YOUR_API_KEY_HERE>",
                x_plex_client_identifier='Postman',
            )

            res = s.add_playlist_contents(playlist_id=8502.01, uri='server://12345/com.plexapp.plugins.library/library/metadata/1', play_queue_id=123)

            if res.object is not None:
                # handle response
                pass
  - target: $["paths"]["/devices"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getDevices
          source: |-
            import plex_api

            s = plex_api.PlexAPI(
                access_token="<YOUR_API_KEY_HERE>",
                x_plex_client_identifier='Postman',
            )

            res = s.get_devices()

            if res.object is not None:
                # handle response
                pass
  - target: $["paths"]["/identity"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getServerIdentity
          source: |-
            import plex_api

            s = plex_api.PlexAPI(
                access_token="<YOUR_API_KEY_HERE>",
                x_plex_client_identifier='Postman',
            )

            res = s.get_server_identity()

            if res.object is not None:
                # handle response
                pass
  - target: $["paths"]["/butler/{taskName}"]["delete"]
    update:
      x-codeSamples:
        - lang: python
          label: stopTask
          source: |-
            import plex_api
            from plex_api.models import operations

            s = plex_api.PlexAPI(
                access_token="<YOUR_API_KEY_HERE>",
                x_plex_client_identifier='Postman',
            )

            res = s.stop_task(task_name=operations.PathParamTaskName.BACKUP_DATABASE)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/hubs/search"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: performSearch
          source: |-
            import plex_api

            s = plex_api.PlexAPI(
                access_token="<YOUR_API_KEY_HERE>",
                x_plex_client_identifier='Postman',
            )

            res = s.perform_search(query='dylan', section_id=1516.53, limit=5)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/library/sections/{sectionId}/refresh"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: refreshLibrary
          source: |-
            import plex_api

            s = plex_api.PlexAPI(
                access_token="<YOUR_API_KEY_HERE>",
                x_plex_client_identifier='Postman',
            )

            res = s.refresh_library(section_id=934.16)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/playlists"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createPlaylist
          source: |-
            import plex_api
            from plex_api.models import operations

            s = plex_api.PlexAPI(
                access_token="<YOUR_API_KEY_HERE>",
                x_plex_client_identifier='Postman',
            )

            res = s.create_playlist(request=operations.CreatePlaylistRequest(
                title='<value>',
                type=operations.QueryParamType.PHOTO,
                smart=operations.Smart.ONE,
                uri='https://inborn-brochure.biz',
            ))

            if res.object is not None:
                # handle response
                pass
  - target: $["paths"]["/pins"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: getPin
          source: |-
            import plex_api

            s = plex_api.PlexAPI(
                x_plex_client_identifier='Postman',
            )

            res = s.get_pin(strong=False, x_plex_client_identifier='Postman')

            if res.object is not None:
                # handle response
                pass
  - target: $["paths"]["/pins/{pinID}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getToken
          source: |-
            import plex_api

            s = plex_api.PlexAPI(
                x_plex_client_identifier='Postman',
            )

            res = s.get_token(pin_id='<value>', x_plex_client_identifier='Postman')

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/playlists/{playlistID}"]["delete"]
    update:
      x-codeSamples:
        - lang: python
          label: deletePlaylist
          source: |-
            import plex_api

            s = plex_api.PlexAPI(
                access_token="<YOUR_API_KEY_HERE>",
                x_plex_client_identifier='Postman',
            )

            res = s.delete_playlist(playlist_id=216.22)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/statistics/media"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getStatistics
          source: |-
            import plex_api

            s = plex_api.PlexAPI(
                access_token="<YOUR_API_KEY_HERE>",
                x_plex_client_identifier='Postman',
            )

            res = s.get_statistics(timespan=4)

            if res.object is not None:
                # handle response
                pass
  - target: $["paths"]["/status/sessions/history/all"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getSessionHistory
          source: |-
            import plex_api

            s = plex_api.PlexAPI(
                access_token="<YOUR_API_KEY_HERE>",
                x_plex_client_identifier='Postman',
            )

            res = s.get_session_history()

            if res.object is not None:
                # handle response
                pass
  - target: $["paths"]["/servers"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getServerList
          source: |-
            import plex_api

            s = plex_api.PlexAPI(
                access_token="<YOUR_API_KEY_HERE>",
                x_plex_client_identifier='Postman',
            )

            res = s.get_server_list()

            if res.object is not None:
                # handle response
                pass
  - target: $["paths"]["/log"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: logLine
          source: |-
            import plex_api
            from plex_api.models import operations

            s = plex_api.PlexAPI(
                access_token="<YOUR_API_KEY_HERE>",
                x_plex_client_identifier='Postman',
            )

            res = s.log_line(level=operations.Level.THREE, message='Test log message', source='Postman')

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/status/sessions"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getSessions
          source: |-
            import plex_api

            s = plex_api.PlexAPI(
                access_token="<YOUR_API_KEY_HERE>",
                x_plex_client_identifier='Postman',
            )

            res = s.get_sessions()

            if res.object is not None:
                # handle response
                pass
  - target: $["paths"]["/transcode/sessions"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getTranscodeSessions
          source: |-
            import plex_api

            s = plex_api.PlexAPI(
                access_token="<YOUR_API_KEY_HERE>",
                x_plex_client_identifier='Postman',
            )

            res = s.get_transcode_sessions()

            if res.object is not None:
                # handle response
                pass
  - target: $["paths"]["/clients"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getAvailableClients
          source: |-
            import plex_api

            s = plex_api.PlexAPI(
                access_token="<YOUR_API_KEY_HERE>",
                x_plex_client_identifier='Postman',
            )

            res = s.get_available_clients()

            if res.object is not None:
                # handle response
                pass
  - target: $["paths"]["/hubs/sections/{sectionId}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getLibraryHubs
          source: |-
            import plex_api
            from plex_api.models import operations

            s = plex_api.PlexAPI(
                access_token="<YOUR_API_KEY_HERE>",
                x_plex_client_identifier='Postman',
            )

            res = s.get_library_hubs(section_id=6728.76, count=9010.22, only_transient=operations.QueryParamOnlyTransient.ZERO)

            if res.object is not None:
                # handle response
                pass
  - target: $["paths"]["/library/sections/{sectionId}"]["delete"]
    update:
      x-codeSamples:
        - lang: python
          label: deleteLibrary
          source: |-
            import plex_api

            s = plex_api.PlexAPI(
                access_token="<YOUR_API_KEY_HERE>",
                x_plex_client_identifier='Postman',
            )

            res = s.delete_library(section_id=1000)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/library/onDeck"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getOnDeck
          source: |-
            import plex_api

            s = plex_api.PlexAPI(
                access_token="<YOUR_API_KEY_HERE>",
                x_plex_client_identifier='Postman',
            )

            res = s.get_on_deck()

            if res.object is not None:
                # handle response
                pass
  - target: $["paths"]["/log/networked"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: enablePaperTrail
          source: |-
            import plex_api

            s = plex_api.PlexAPI(
                access_token="<YOUR_API_KEY_HERE>",
                x_plex_client_identifier='Postman',
            )

            res = s.enable_paper_trail()

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/playlists/{playlistID}"]["put"]
    update:
      x-codeSamples:
        - lang: python
          label: updatePlaylist
          source: |-
            import plex_api

            s = plex_api.PlexAPI(
                access_token="<YOUR_API_KEY_HERE>",
                x_plex_client_identifier='Postman',
            )

            res = s.update_playlist(playlist_id=3915, title='<value>', summary='<value>')

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/library/hashes"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getFileHash
          source: |-
            import plex_api

            s = plex_api.PlexAPI(
                access_token="<YOUR_API_KEY_HERE>",
                x_plex_client_identifier='Postman',
            )

            res = s.get_file_hash(url='file://C:\Image.png&type=13', type=4462.17)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/library/sections/{sectionId}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getLibrary
          source: |-
            import plex_api
            from plex_api.models import operations

            s = plex_api.PlexAPI(
                access_token="<YOUR_API_KEY_HERE>",
                x_plex_client_identifier='Postman',
            )

            res = s.get_library(section_id=1000, include_details=operations.IncludeDetails.ZERO)

            if res.object is not None:
                # handle response
                pass
  - target: $["paths"]["/library/sections/{sectionId}/search"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: searchLibrary
          source: |-
            import plex_api
            from plex_api.models import operations

            s = plex_api.PlexAPI(
                access_token="<YOUR_API_KEY_HERE>",
                x_plex_client_identifier='Postman',
            )

            res = s.search_library(section_id=933505, type=operations.Type.FOUR)

            if res.object is not None:
                # handle response
                pass
  - target: $["paths"]["/playlists/{playlistID}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getPlaylist
          source: |-
            import plex_api

            s = plex_api.PlexAPI(
                access_token="<YOUR_API_KEY_HERE>",
                x_plex_client_identifier='Postman',
            )

            res = s.get_playlist(playlist_id=4109.48)

            if res.object is not None:
                # handle response
                pass
  - target: $["paths"]["/activities"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getServerActivities
          source: |-
            import plex_api

            s = plex_api.PlexAPI(
                access_token="<YOUR_API_KEY_HERE>",
                x_plex_client_identifier='Postman',
            )

            res = s.get_server_activities()

            if res.object is not None:
                # handle response
                pass
  - target: $["paths"]["/butler"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: startAllTasks
          source: |-
            import plex_api

            s = plex_api.PlexAPI(
                access_token="<YOUR_API_KEY_HERE>",
                x_plex_client_identifier='Postman',
            )

            res = s.start_all_tasks()

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/butler"]["delete"]
    update:
      x-codeSamples:
        - lang: python
          label: stopAllTasks
          source: |-
            import plex_api

            s = plex_api.PlexAPI(
                access_token="<YOUR_API_KEY_HERE>",
                x_plex_client_identifier='Postman',
            )

            res = s.stop_all_tasks()

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/butler/{taskName}"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: startTask
          source: |-
            import plex_api
            from plex_api.models import operations

            s = plex_api.PlexAPI(
                access_token="<YOUR_API_KEY_HERE>",
                x_plex_client_identifier='Postman',
            )

            res = s.start_task(task_name=operations.TaskName.CLEAN_OLD_BUNDLES)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/library/recentlyAdded"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getRecentlyAdded
          source: |-
            import plex_api

            s = plex_api.PlexAPI(
                access_token="<YOUR_API_KEY_HERE>",
                x_plex_client_identifier='Postman',
            )

            res = s.get_recently_added()

            if res.object is not None:
                # handle response
                pass
  - target: $["paths"]["/security/resources"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getSourceConnectionInformation
          source: |-
            import plex_api

            s = plex_api.PlexAPI(
                access_token="<YOUR_API_KEY_HERE>",
                x_plex_client_identifier='Postman',
            )

            res = s.get_source_connection_information(source='server://client-identifier')

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/:/scrobble"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: markPlayed
          source: |-
            import plex_api

            s = plex_api.PlexAPI(
                access_token="<YOUR_API_KEY_HERE>",
                x_plex_client_identifier='Postman',
            )

            res = s.mark_played(key=59398)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/:/progress"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: updatePlayProgress
          source: |-
            import plex_api

            s = plex_api.PlexAPI(
                access_token="<YOUR_API_KEY_HERE>",
                x_plex_client_identifier='Postman',
            )

            res = s.update_play_progress(key='<value>', time=90000, state='played')

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/library/sections"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getLibraries
          source: |-
            import plex_api

            s = plex_api.PlexAPI(
                access_token="<YOUR_API_KEY_HERE>",
                x_plex_client_identifier='Postman',
            )

            res = s.get_libraries()

            if res.object is not None:
                # handle response
                pass
  - target: $["paths"]["/updater/apply"]["put"]
    update:
      x-codeSamples:
        - lang: python
          label: applyUpdates
          source: |-
            import plex_api
            from plex_api.models import operations

            s = plex_api.PlexAPI(
                access_token="<YOUR_API_KEY_HERE>",
                x_plex_client_identifier='Postman',
            )

            res = s.apply_updates(tonight=operations.Tonight.ONE, skip=operations.Skip.ONE)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getServerCapabilities
          source: |-
            import plex_api

            s = plex_api.PlexAPI(
                access_token="<YOUR_API_KEY_HERE>",
                x_plex_client_identifier='Postman',
            )

            res = s.get_server_capabilities()

            if res.object is not None:
                # handle response
                pass
  - target: $["paths"]["/search"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getSearchResults
          source: |-
            import plex_api

            s = plex_api.PlexAPI(
                access_token="<YOUR_API_KEY_HERE>",
                x_plex_client_identifier='Postman',
            )

            res = s.get_search_results(query='110')

            if res.object is not None:
                # handle response
                pass
  - target: $["paths"]["/playlists/{playlistID}/items"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getPlaylistContents
          source: |-
            import plex_api

            s = plex_api.PlexAPI(
                access_token="<YOUR_API_KEY_HERE>",
                x_plex_client_identifier='Postman',
            )

            res = s.get_playlist_contents(playlist_id=5004.46, type=9403.59)

            if res.object is not None:
                # handle response
                pass
  - target: $["paths"]["/updater/status"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getUpdateStatus
          source: |-
            import plex_api

            s = plex_api.PlexAPI(
                access_token="<YOUR_API_KEY_HERE>",
                x_plex_client_identifier='Postman',
            )

            res = s.get_update_status()

            if res.object is not None:
                # handle response
                pass
  - target: $["paths"]["/video/:/transcode/universal/start.mpd"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: startUniversalTranscode
          source: |-
            import plex_api
            from plex_api.models import operations

            s = plex_api.PlexAPI(
                access_token="<YOUR_API_KEY_HERE>",
                x_plex_client_identifier='Postman',
            )

            res = s.start_universal_transcode(request=operations.StartUniversalTranscodeRequest(
                has_mde=1,
                path='/library/metadata/23409',
                media_index=0,
                part_index=0,
                protocol='hls',
                fast_seek=0,
                direct_play=0,
                direct_stream=0,
                subtitle_size=100,
                subtites='burn',
                audio_boost=100,
                location='lan',
                media_buffer_size=102400,
                session='zvcage8b7rkioqcm8f4uns4c',
                add_debug_overlay=0,
                auto_adjust_quality=0,
            ))

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/activities/{activityUUID}"]["delete"]
    update:
      x-codeSamples:
        - lang: python
          label: cancelServerActivities
          source: |-
            import plex_api

            s = plex_api.PlexAPI(
                access_token="<YOUR_API_KEY_HERE>",
                x_plex_client_identifier='Postman',
            )

            res = s.cancel_server_activities(activity_uuid='25b71ed5-0f9d-461c-baa7-d404e9e10d3e')

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/hubs"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getGlobalHubs
          source: |-
            import plex_api
            from plex_api.models import operations

            s = plex_api.PlexAPI(
                access_token="<YOUR_API_KEY_HERE>",
                x_plex_client_identifier='Postman',
            )

            res = s.get_global_hubs(count=1262.49, only_transient=operations.OnlyTransient.ONE)

            if res.object is not None:
                # handle response
                pass
  - target: $["paths"]["/library/metadata/{ratingKey}/children"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getMetadataChildren
          source: |-
            import plex_api

            s = plex_api.PlexAPI(
                access_token="<YOUR_API_KEY_HERE>",
                x_plex_client_identifier='Postman',
            )

            res = s.get_metadata_children(rating_key=1539.14)

            if res.object is not None:
                # handle response
                pass
  - target: $["paths"]["/security/token"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getTransientToken
          source: |-
            import plex_api
            from plex_api.models import operations

            s = plex_api.PlexAPI(
                access_token="<YOUR_API_KEY_HERE>",
                x_plex_client_identifier='Postman',
            )

            res = s.get_transient_token(type=operations.GetTransientTokenQueryParamType.DELEGATION, scope=operations.Scope.ALL)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/:/prefs"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getServerPreferences
          source: |-
            import plex_api

            s = plex_api.PlexAPI(
                access_token="<YOUR_API_KEY_HERE>",
                x_plex_client_identifier='Postman',
            )

            res = s.get_server_preferences()

            if res.object is not None:
                # handle response
                pass
  - target: $["paths"]["/:/unscrobble"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: markUnplayed
          source: |-
            import plex_api

            s = plex_api.PlexAPI(
                access_token="<YOUR_API_KEY_HERE>",
                x_plex_client_identifier='Postman',
            )

            res = s.mark_unplayed(key=59398)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/transcode/sessions/{sessionKey}"]["delete"]
    update:
      x-codeSamples:
        - lang: python
          label: stopTranscodeSession
          source: |-
            import plex_api

            s = plex_api.PlexAPI(
                access_token="<YOUR_API_KEY_HERE>",
                x_plex_client_identifier='Postman',
            )

            res = s.stop_transcode_session(session_key='zz7llzqlx8w9vnrsbnwhbmep')

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/updater/check"]["put"]
    update:
      x-codeSamples:
        - lang: python
          label: checkForUpdates
          source: |-
            import plex_api
            from plex_api.models import operations

            s = plex_api.PlexAPI(
                access_token="<YOUR_API_KEY_HERE>",
                x_plex_client_identifier='Postman',
            )

            res = s.check_for_updates(download=operations.Download.ONE)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/:/timeline"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getTimeline
          source: |-
            import plex_api
            from plex_api.models import operations

            s = plex_api.PlexAPI(
                access_token="<YOUR_API_KEY_HERE>",
                x_plex_client_identifier='Postman',
            )

            res = s.get_timeline(request=operations.GetTimelineRequest(
                rating_key=23409,
                key='/library/metadata/23409',
                state=operations.State.PLAYING,
                has_mde=1,
                time=2000,
                duration=10000,
                context='home:hub.continueWatching',
                play_queue_item_id=1,
                play_back_time=2000,
                row=1,
            ))

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/playlists/{playlistID}/items"]["delete"]
    update:
      x-codeSamples:
        - lang: python
          label: clearPlaylistContents
          source: |-
            import plex_api

            s = plex_api.PlexAPI(
                access_token="<YOUR_API_KEY_HERE>",
                x_plex_client_identifier='Postman',
            )

            res = s.clear_playlist_contents(playlist_id=1893.18)

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/butler"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getButlerTasks
          source: |-
            import plex_api

            s = plex_api.PlexAPI(
                access_token="<YOUR_API_KEY_HERE>",
                x_plex_client_identifier='Postman',
            )

            res = s.get_butler_tasks()

            if res.object is not None:
                # handle response
                pass
  - target: $["paths"]["/myplex/account"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getMyPlexAccount
          source: |-
            import plex_api

            s = plex_api.PlexAPI(
                access_token="<YOUR_API_KEY_HERE>",
                x_plex_client_identifier='Postman',
            )

            res = s.get_my_plex_account()

            if res.object is not None:
                # handle response
                pass
  - target: $["paths"]["/log"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: logMultiLine
          source: |-
            import plex_api

            s = plex_api.PlexAPI(
                access_token="<YOUR_API_KEY_HERE>",
                x_plex_client_identifier='Postman',
            )

            res = s.log_multi_line(request='level=4&message=Test%20message%201&source=postman
            level=3&message=Test%20message%202&source=postman
            level=1&message=Test%20message%203&source=postman')

            if res is not None:
                # handle response
                pass
