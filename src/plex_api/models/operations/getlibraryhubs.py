"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Optional

class QueryParamOnlyTransient(int, Enum):
    r"""Only return hubs which are \\"transient\\", meaning those which are prone to changing after media playback or addition (e.g. On Deck, or Recently Added)."""
    ZERO = 0
    ONE = 1


@dataclasses.dataclass
class GetLibraryHubsRequest:
    section_id: float = dataclasses.field(metadata={'path_param': { 'field_name': 'sectionId', 'style': 'simple', 'explode': False }})
    r"""the Id of the library to query"""
    count: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'count', 'style': 'form', 'explode': True }})
    r"""The number of items to return with each hub."""
    only_transient: Optional[QueryParamOnlyTransient] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'onlyTransient', 'style': 'form', 'explode': True }})
    r"""Only return hubs which are \\"transient\\", meaning those which are prone to changing after media playback or addition (e.g. On Deck, or Recently Added)."""
    



@dataclasses.dataclass
class GetLibraryHubsResponse:
    content_type: str = dataclasses.field()
    r"""HTTP response content type for this operation"""
    raw_response: requests_http.Response = dataclasses.field()
    r"""Raw HTTP response; suitable for custom response parsing"""
    status_code: int = dataclasses.field()
    r"""HTTP response status code for this operation"""
    

