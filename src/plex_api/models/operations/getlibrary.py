"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Optional

class IncludeDetails(int, Enum):
    r"""Whether or not to include details for a section (types, filters, and sorts).
    Only exists for backwards compatibility, media providers other than the server libraries have it on always.
    """
    ZERO = 0
    ONE = 1


@dataclasses.dataclass
class GetLibraryRequest:
    section_id: float = dataclasses.field(metadata={'path_param': { 'field_name': 'sectionId', 'style': 'simple', 'explode': False }})
    r"""the Id of the library to query"""
    include_details: Optional[IncludeDetails] = dataclasses.field(default=IncludeDetails.ZERO, metadata={'query_param': { 'field_name': 'includeDetails', 'style': 'form', 'explode': True }})
    r"""Whether or not to include details for a section (types, filters, and sorts).
    Only exists for backwards compatibility, media providers other than the server libraries have it on always.
    """
    



@dataclasses.dataclass
class GetLibraryResponse:
    content_type: str = dataclasses.field()
    r"""HTTP response content type for this operation"""
    raw_response: requests_http.Response = dataclasses.field()
    r"""Raw HTTP response; suitable for custom response parsing"""
    status_code: int = dataclasses.field()
    r"""HTTP response status code for this operation"""
    

