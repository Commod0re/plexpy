"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Optional

class PlaylistType(str, Enum):
    r"""limit to a type of playlist."""
    AUDIO = 'audio'
    VIDEO = 'video'
    PHOTO = 'photo'

class QueryParamSmart(int, Enum):
    r"""type of playlists to return (default is all)."""
    ZERO = 0
    ONE = 1


@dataclasses.dataclass
class GetPlaylistsRequest:
    playlist_type: Optional[PlaylistType] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'playlistType', 'style': 'form', 'explode': True }})
    r"""limit to a type of playlist."""
    smart: Optional[QueryParamSmart] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'smart', 'style': 'form', 'explode': True }})
    r"""type of playlists to return (default is all)."""
    



@dataclasses.dataclass
class GetPlaylistsResponse:
    content_type: str = dataclasses.field()
    r"""HTTP response content type for this operation"""
    raw_response: requests_http.Response = dataclasses.field()
    r"""Raw HTTP response; suitable for custom response parsing"""
    status_code: int = dataclasses.field()
    r"""HTTP response status code for this operation"""
    

